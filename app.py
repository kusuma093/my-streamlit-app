import streamlit as st
import requests
from PIL import Image
from ultralytics import YOLO
import os
import uuid
import pandas as pd

st.set_page_config(page_title="‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI", layout="centered")
st.title("üöò ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏£‡∏ñ‡∏î‡πâ‡∏ß‡∏¢ AI")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á label ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def explain_label(label):
    parts = label.split("-")
    if len(parts) == 2:
        area, damage = parts
    elif len(parts) == 3:
        area = f"{parts[0]}-{parts[1]}"
        damage = parts[2]
    else:
        return f"‚ùì ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {label}"

    area_thai = {
        "front": "‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
        "back": "‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á",
        "left": "‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢",
        "right": "‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤",
        "front-left": "‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢",
        "front-right": "‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤",
        "back-left": "‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ã‡πâ‡∏≤‡∏¢",
        "back-right": "‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏ß‡∏≤",
    }.get(area, area)

    damage_thai = {
        "0": "‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢",
        "1": "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢",
        "2": "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
        "3": "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á",
    }.get(damage, f"‡∏£‡∏∞‡∏î‡∏±‡∏ö {damage}")

    return f"{area_thai} - {damage_thai}"

# --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏†‡∏≤‡∏û
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:", ["üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", "üåê ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û"])
image_path = None

if option == "üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á":
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image_path = f"uploaded_{uuid.uuid4().hex}.jpg"
        with open(image_path, "wb") as f:
            f.write(uploaded_file.read())
        st.image(image_path, caption="‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", use_container_width=True)
        st.session_state["image_path"] = image_path

elif option == "üåê ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û":
    image_url = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û", "")
    if image_url:
        image_path = f"downloaded_{uuid.uuid4().hex}.jpg"
        try:
            headers = { "User-Agent": "Mozilla/5.0" }
            response = requests.get(image_url, headers=headers, stream=True)
            if response.status_code == 200:
                with open(image_path, 'wb') as f:
                    for chunk in response.iter_content(1024):
                        f.write(chunk)
                st.image(image_path, caption="‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL", use_container_width=True)
                st.session_state["image_path"] = image_path
            else:
                st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.status_code}")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
model_path = "runs/detect/train2/weights/best.pt"
if os.path.exists(model_path):
    model = YOLO(model_path)
else:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO best.pt")

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô AI
if "image_path" in st.session_state :
    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
        image_path = st.session_state["image_path"]
        results = model.predict(source=image_path, save=True, conf=0.25)
        output_image_path = os.path.join(results[0].save_dir, os.path.basename(image_path))
        st.session_state["results"] = results
        st.session_state["output_image_path"] = output_image_path

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
if "output_image_path" in st.session_state:
    st.image(st.session_state["output_image_path"], caption="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI", use_container_width=True)

# --- ‡πÅ‡∏™‡∏î‡∏á label ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö front
if "results" in st.session_state:
    results = st.session_state["results"]
    detected_labels = []

    for result in results:
        for box in result.boxes:
            cls_id = int(box.cls[0])
            label = result.names[cls_id]
            conf = float(box.conf[0])
            description = explain_label(label)
            st.write(f"üîç {description} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {conf*100:.1f}%)")
            detected_labels.append(label)

    # ‡πÄ‡∏ä‡πá‡∏Ñ front / back
    front_count = sum(1 for lbl in detected_labels if lbl.startswith("front"))
    back_count = sum(1 for lbl in detected_labels if lbl.startswith("back"))
    if front_count > 1 or back_count > 1:
        st.success(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ {front_count} ‡πÅ‡∏•‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á {back_count}")

        # --- API: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
        car_type_api = "https://express.garage-pro.net/MobileService/GetCarTypes"
        try:
            car_type_response = requests.post(car_type_api)
            car_types = car_type_response.json()
            car_type_dict = {item["Text"]: item["Value"] for item in car_types}

            selected_text = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ:", list(car_type_dict.keys()))
            selected_value = int(car_type_dict[selected_text])

            # --- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            if selected_value == 12 and back_count > 1:
                custom_template_id = 124
            elif selected_value == 12 and front_count > 1:
                custom_template_id = 29
            elif selected_value == 19 and back_count > 1:
                custom_template_id = 177
            elif selected_value == 19 and front_count > 1:
                custom_template_id = 30
            else:
                st.info("üö´ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏ô‡∏µ‡πâ")
                custom_template_id = None

            # --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ custom_template_id
            if custom_template_id:
                gps_api = "https://express.garage-pro.net/MobileService/GetCustomTemplateGPSCode"
                headers = { "Content-Type": "application/json" }
                payload = { "customTemplateId": custom_template_id }

                gps_response = requests.post(gps_api, headers=headers, json=payload)
                if gps_response.status_code == 200:
                    gps_data = gps_response.json()
                    if isinstance(gps_data, list) and len(gps_data) > 0:
                        df = pd.DataFrame(gps_data)
                        st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà (‡∏à‡∏≤‡∏Å GPS Code)")
                        st.dataframe(df[["GPSCode", "GPSName", "GPSSpecial", "GPSPositionId"]])
                    else:
                        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ")
                else:
                    st.error(f"‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API GPS ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {gps_response.status_code}")
        except Exception as e:
            st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ")
            st.exception(e)
    else:
        st.info("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (front-x) ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á (back-x) ‡∏°‡∏≤‡∏Å‡∏û‡∏≠ ‡∏à‡∏∂‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ")
